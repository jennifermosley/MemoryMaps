"0",""
"0","## Relational/Simulation Data Processing Prep ##"
"0",""
"0","# Now that we have processed the memories to be uniform in format across subjects,"
"0","# we can now focus on the relational data (which connects memories based on causality)"
"0","# and we can focus on the simulation data (which corresponds to the degree to which a memory"
"0","# is connected to another)"
"0",""
"0","# Similar to the memory wrangling, we need to organize this data to allow for easy assignment"
"0","# of memories to their corresponding relation and simulation data. That is, for each memory,"
"0","# there are 24 possible connections and corresponding ratings for each of those possible connections."
"0","# We'll need to consolidate this information in a similar fashion to what we did"
"0","# with the memory data, accounting for the different memory nomination stages."
"0",""
"0","# Let's create a data frame for the relational-simulation data as our workspace"
"0","relSim <- df[,c(1,39:2438)]"
"0","sub <- nrow(relSim)"
"0","relInds <- grep(""relations_"",colnames(relSim)) # This defines the indices,"
"0","# or column numbers, corresponding to the relational data for each memory. "
"0","# Learn more about indices here: https://rspatial.org/intr/4-indexing.html"
"0",""
"0","# Let's create a function that looks for whether cells/columns are empty"
"0","is_empty <- function(x) {"
"0","  return(is.na(x) || x == """")"
"0","}"
"0",""
"0","# Let's also create function that moves non-empty cells to the front of the data frame"
"0","move_to_front <- function(df, cols_to_move) {"
"0","  all_cols <- seq_along(df)"
"0","  remaining_cols <- setdiff(all_cols, cols_to_move)"
"0","  return(df[, c(cols_to_move)])"
"0","}"
"0",""
"0","# Lastly, a function to remove columns"
"0","# We'll use this once we move populated cells to the front of the dataframe."
"0","remove_columns <- function(data, cols) {"
"0","  data <- data[, !(names(data) %in% cols)]"
"0","  return(data)"
"0","}"
"0",""
"0","# We will define the column name patterns for columns corresponding to each mem "
"0","# nomination stage. Look at the column names of each stage in relSim to confirm your patterns. "
"0","# We will pipe, or ""insert"" these patterns into lines of code that look for "
"0","# columns INCLUDING these patterns."
"0","ls_patterns <- c(""_ls"", ""_ls_"")"
"0","lp_patterns <- c(""_lp"", ""_lp_"")"
"0","m2m_patterns <- c(""_m2m"", ""_m2m_"")"
"0","cle_patterns <- c(""_cle"",""_cle_"")"
"0",""
"0","# Relations and their simulations per stage"
"0",""
"0","# Now let's use our patterns to find the columns for each nomination stage"
"0","# and then create indices (e.g., lsInds) to know which columns of relSim"
"0","# correspond to each stage. "
"0",""
"0","lsInds <- grep(paste(ls_patterns, collapse = ""|""), colnames(relSim), value = FALSE)"
"0",""
"0","lpInds <- grep(paste(lp_patterns, collapse = ""|""), colnames(relSim), value = FALSE)"
"0",""
"0","m2mInds <- grep(paste(m2m_patterns, collapse = ""|""), colnames(relSim), value = FALSE)"
"0",""
"0","cleInds <- grep(paste(cle_patterns, collapse = ""|""), colnames(relSim), value = FALSE)"
"0",""
"0","# Create/initialize a vector to keep track of the columns to be moved"
"0","cols_to_remove <- c()"
"0",""
"0","# Create/initialize a vector to input updated columns from relSim"
"0","relSim2 <- data.frame()"
