"0","```r
fullLong <- matrix(nrow=0,ncol=65)

fullShort <- matrix(nrow=0,ncol=53)

uIds <- unique(rawDf$subID)

colnames(rawDf)[which(colnames(rawDf)==\"M1_IM\"):(which(colnames(rawDf)==\"M1_IM\")+22)]
```"
"1"," [1] \"M1_IM\"              \"M1_Val_1\"           \"M1_Val_2\"           \"M1_Clear\"           \"M1_Easy\"           
 [6] \"M1_Rep\"             \"M1_Fund\"            \"M1_Chan\"            \"M1_Know\"            \"M1_Taught\"         
[11] \"M1_Expect\"          \"M1_Breadth\"         \"M1_Initiate\"        \"M1_Locus\"           \"M1_Control\"        
[16] \"M1_Stability\"       \"M1_SO\"              \"M1_SO_9_TEXT\"       \"M1_Simulate\"        \"M1_Simulate_3_TEXT\"
[21] \"M1_Length_12\"       \"M1_Length_13\"       \"M1_Length_14\"      
"
"0","```r
varnames <- c(\"IM\", \"Pos\", \"Neg\", \"Clear\", \"Easy\", \"Rep\", \"Fund\", \"Chan\", \"Know\", \"Taught\", \"Expect\", \"Breadth\", \"Initiate\", \"Locus\", \"Control\", \"Stability\", \"SO\", \"Simulate\", \"T.Y\", \"T.M\", \"D.D\")

  # uIds <- get(paste0(\"T\",i,\"s\"))
  # raw <- get(paste0(\"T\",i,\"raw\"))

  for(j in 1:length(uIds)){
    subID <- uIds[j]
    subNetUW <- get(paste0(\"subIGraph.\",subID))
    subNetW <- get(paste0(\"subIGraphW.\",subID))
    numMems <- sum(!is.na(memMat[memMat$subID==subID,2:(memMax+1) ]))
    
    tsubNetW <- graph_from_adjacency_matrix(t(as.matrix(as_adjacency_matrix(subNetW))))
    tsubNetUW <- graph_from_adjacency_matrix(t(as.matrix(as_adjacency_matrix(subNetUW))))
    
    subNet.UD.C <- as.undirected(subNetUW, mode=\"collapse\")
    subNet.UD.M <- as.undirected(subNetUW, mode=\"mutual\")
    subNetW.UD.C <- as.undirected(subNetW, mode=\"collapse\")
    subNetW.UD.M <- as.undirected(subNetW, mode=\"mutual\")
    
    variables <- c(\"IM\", \"Val_1\", \"Val_2\", \"Clear\", \"Easy\", \"Rep\", \"Fund\", \"Chan\", \"Know\", \"Taught\", \"Expect\", \"Breadth\", \"Initiate\", \"Locus\", \"Control\", \"Stability\", \"SO\", \"Simulate\", \"Length_12\", \"Length_13\", \"Length_14\")
    for(v in variables){
      aVar <- as.numeric(rawDf[rawDf$subID==subID, paste0(\"M\",1:numMems,\"_\",v)])
      assign(v,aVar)
    }
    
    V(subNetUW)$IM <- IM
    V(subNetUW)$Val_1 <- Val_1
    V(subNetUW)$Val_2 <- Val_2
    V(subNetUW)$Clear <- Clear
    V(subNetUW)$Easy <- Easy
    V(subNetUW)$Rep <- Rep
    V(subNetUW)$Fund <- Fund
    V(subNetUW)$Chan <- Chan
    V(subNetUW)$Know <- Know
    V(subNetUW)$Taught <- Taught
    V(subNetUW)$Expect <- Expect
    V(subNetUW)$Breadth <- Breadth
    V(subNetUW)$Initiate <- Initiate
    V(subNetUW)$Locus <- Locus
    V(subNetUW)$Control <- Control
    V(subNetUW)$Stability <- Stability
    V(subNetUW)$SO <- SO
    V(subNetUW)$Simulate <- Simulate
    V(subNetUW)$Length_12 <- Length_12
    V(subNetUW)$Length_13 <- Length_13
    V(subNetUW)$Length_14 <- Length_14
    
    V(subNetW)$IM <- IM
    V(subNetW)$Val_1 <- Val_1
    V(subNetW)$Val_2 <- Val_2
    V(subNetW)$Clear <- Clear
    V(subNetW)$Easy <- Easy
    V(subNetW)$Rep <- Rep
    V(subNetW)$Fund <- Fund
    V(subNetW)$Chan <- Chan
    V(subNetW)$Know <- Know
    V(subNetW)$Taught <- Taught
    V(subNetW)$Expect <- Expect
    V(subNetW)$Breadth <- Breadth
    V(subNetW)$Initiate <- Initiate
    V(subNetW)$Locus <- Locus
    V(subNetW)$Control <- Control
    V(subNetW)$Stability <- Stability
    V(subNetW)$SO <- SO
    V(subNetW)$Simulate <- Simulate
    V(subNetW)$Length_12 <- Length_12
    V(subNetW)$Length_13 <- Length_13
    V(subNetW)$Length_14 <- Length_14
    
    subLong <- 
      cbind(subID,
          as_vector(memMat[memMat$subID==subID,2:(numMems+1)]),
          seq(1,numMems),
          degree(subNetUW),
          degree(subNetUW,mode=\"out\"),
          degree(subNetUW,mode=\"in\"),
          strength(subNetW),
          strength(subNetW, mode=\"out\"),
          strength(subNetW, mode=\"in\"),
          eigen_centrality(subNetUW)$vector,
          eigen_centrality(subNetW)$vector,
          hub_score(subNetUW)$vector,
          hub_score(subNetW)$vector,
          page_rank(subNetUW)$vector,
          page_rank(subNetW)$vector,
          page_rank(tsubNetUW)$vector,
          page_rank(tsubNetW)$vector,
          authority_score(subNetUW)$vector,
          authority_score(subNetW)$vector,
          degree(subNet.UD.C),
          degree(subNet.UD.M),
          strength(subNetW.UD.C),
          strength(subNetW.UD.M),
          IM,
          Val_1,
          Val_2,
          Clear,
          Easy,
          Rep,
          Fund,
          Chan,
          Know,
          Taught,
          Expect,
          Breadth,
          Initiate,
          Locus,
          Control,
          Stability,
          SO,
          Simulate,
          Length_12,
          Length_13,
          Length_14
          )
    
    for(v in variables){
     aVar <- unlist(lapply(1:numMems, function(x) computeNeighbors(subNetUW, x, v, \"all\"))) 
      assign(paste0(v,\"_neighs\"),aVar)
    }
    
    subLong <- cbind(subLong,
          IM_neighs,
          Val_1_neighs,
          Val_2_neighs,
          Clear_neighs,
          Easy_neighs,
          Rep_neighs,
          Fund_neighs,
          Chan_neighs,
          Know_neighs,
          Taught_neighs,
          Expect_neighs,
          Breadth_neighs,
          Initiate_neighs,
          Locus_neighs,
          Control_neighs,
          Stability_neighs,
          SO_neighs,
          Simulate_neighs,
          Length_12_neighs,
          Length_13_neighs,
          Length_14_neighs
    
    )
    
    
    
    # identity to identity network total edges
    idEdgT <- ecount(subNetUW)
    # density
    density <- edge_density(subNetUW)
    # average distance
    aveDist <- mean_distance(subNetUW)
    # clustering coefficient
    idTrans <- transitivity(subNetUW, \"global\")
    # small worldness
    # global efficiency
    globEff <- brainGraph::efficiency(subNetUW, type = \"global\")
    # Mean strength
    meanStre <- mean(strength(subNetW))
    # Sum strength
    sumStre <- sum(strength(subNetW))
    # Similarity mean
    idSimGlob <- (similarity(subNetW, method = \"dice\"))%>% .[lower.tri(.)] %>% mean()
    # Reciprocity
    recip <- reciprocity(subNetW)
    # Diameter
    diam <- diameter(subNetW)
    # Average Path Length (Unweighted)
    apl <- average.path.length(subNetUW)
    # Average Path Length (weighted)
    aplW <- average.path.length(subNetW)
    # Modularity (Unweighted)
    modular <- modularityWT(subNetUW)
    # Modularity (Weighted)
    modularW <- modularityWT(subNetW)
    # Compactness (Unweighted)
    compact <- Compactness(subNetUW)
    # Compactness (Weighted)
    compactW <- Compactness(subNetW)
    # Cohesion (Unweighted)
    cohes <- cohesion(subNetUW)
    # Cohesion (Weighted)
    cohesW <- cohesion(subNetW)
    # Centralization
    centrDeg <- centr_degree((subNetUW))$centralization 
    centrBet <- centr_betw((subNetUW))$centralization
    centrClo <- centr_clo((subNetUW))$centralization
    centrEig <- centr_eigen((subNetUW))$centralization
    # Centralization (Weighted)
    centrDegW <- centr_degree((subNetW))$centralization 
    centrBetW <- centr_betw((subNetW))$centralization
    centrCloW <- centr_clo((subNetW))$centralization
    centrEigW <- centr_eigen((subNetW))$centralization
    # Dominance/Variability
    sdDeg <- sd(degree(subNetUW))      
    sdBet <- sd(betweenness(subNetUW))
    sdClo <- sd(closeness(subNetUW))
    sdEig <- sd(evcent(subNetUW)$vector)
    # Dominance/Variability (Weighted)
    sdDegW <- sd(degree(subNetW))      
    sdBetW <- sd(betweenness(subNetW))
    sdCloW <- sd(closeness(subNetW))
    sdEigW <- sd(evcent(subNetW)$vector)
    
    variables <- c(\"IM\", \"Val_1\", \"Val_2\", \"Clear\", \"Easy\", \"Rep\", \"Fund\", \"Chan\", \"Know\", \"Taught\", \"Expect\", \"Breadth\", \"Initiate\", \"Locus\", \"Control\", \"Stability\", \"SO\")
    # assortativity identification
    homophs <- unlist(
      lapply(variables, function(x) assortativityNA(subNetUW, as.numeric(
      vertex_attr(subNetUW, x) +
      rnorm(1, 0, .00001), 
      directed=T
      )))
    )
    names(homophs) <- paste0(variables,\"_homoph\")
    
    subShort <- c(subID,idEdgT,density,aveDist,idTrans,globEff, numMems, meanStre, sumStre, idSimGlob, recip, diam, apl, aplW, modular, modularW, compact, compactW, cohes, cohesW, centrDeg, centrBet, centrClo, centrEig, centrDegW, centrBetW, centrCloW, centrEigW, sdDeg, sdBet, sdClo, sdEig,  sdDegW, sdBetW, sdCloW, sdEigW, homophs)
    
    fullLong <- rbind(fullLong, subLong)
    fullShort <- rbind(fullShort, subShort)
  }
```"
"1","Warning: `induced.subgraph()` was deprecated in igraph 2.0.0.
Please use `induced_subgraph()` instead.Warning: `average.path.length()` was deprecated in igraph 2.0.0.
Please use `mean_distance()` instead.Warning: `evcent()` was deprecated in igraph 2.0.0.
Please use `eigen_centrality()` instead.Warning: The `...` argument of `assortativity()` is deprecated as of igraph 1.6.0.
Arguments `values` and `values.in` must be named.
"
"0","```r
fullLong <- as.data.frame(fullLong)
begNames <- c(\"subID\",\"memory\",\"memCode\",\"degree\", \"outdegree\", \"indegree\", \"strength\",\"strengthOut\",\"strengthIn\",\"eigen\",\"eigenW\",\"hub\",\"hubW\",\"page\",\"pageW\",\"pageOut\",\"pageOutW\",\"auth\",\"authW\",\"UD.C.Deg\",\"UD.M.Deg\",\"UD.C.Streng\",\"UD.M.Streng\")
colnames(fullLong)[1:length(begNames)] <- begNames

fullLong[4:ncol(fullLong)] <- apply(fullLong[4:ncol(fullLong)], 2, as.numeric)



begNames <- c(\"subID\",\"edgeTot\",\"dense\",\"aveDist\",\"idTrans\",\"globEff\",\"numID\",
              \"meanStre\",\"sumStre\",\"idSimGlob\",\"recip\",\"diam\",\"apl\",\"aplW\",
              \"modular\",\"modularW\",\"compact\",\"compactW\",\"cohes\",\"cohesW\",\"centrDeg\",
              \"centrBet\",\"centrClo\",\"centEig\",\"centrDegW\",\"centrBetW\",\"centrCloW\",
              \"centrEigW\",\"sdDeg\",\"sdBet\",\"sdClo\",\"sdEig\",\"sdDegW\",\"sdBetW\",\"sdCloW\",\"sdEigW\",
              paste0(variables,\"_Homoph\"))
colnames(fullShort)[1:length(begNames)] <- begNames
fullShort <- as.data.frame(fullShort)

```"
