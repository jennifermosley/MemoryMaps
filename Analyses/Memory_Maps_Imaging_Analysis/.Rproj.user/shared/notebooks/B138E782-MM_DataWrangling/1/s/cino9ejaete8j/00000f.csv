"0",""
"0","## Relational/Simulation Data Processing - PART 1 ##"
"0",""
"0","# Create/initialize data frames to input the data from each of the nomination stages"
"0","# into their respective data frames "
"0","lsSubs <- data.frame()"
"0","lpSubs <- data.frame()"
"0","m2mSubs <- data.frame()"
"0","cleSubs <- data.frame()"
"0",""
"0","# The plan is to find the empty columns of relSim, and depending on whether they are "
"0","# empty, either 1) remove the populated data from the columns to add to their "
"0","# corresponding nomination stage data frame or 2) continue searching for a set of"
"0","# columns with populated cells. "
"0",""
"0","# Let's find the empty columns of relSim."
"0",""
"0","# We are using logical vectors (meaning, instead of numeric values, we will see a vector of"
"0","# TRUE or FALSE) to see whether the cells we are searching through are empty."
"0",""
"0","# For each row/subject included in relSim,"
"0","for (s in 1:nrow(relSim)){"
"0","  mtLs <- all(sapply(relSim[s, lsInds], is_empty)) # See if LS columns are empty (TRUE = EMPTY)"
"0","  mtLp <- all(sapply(relSim[s, lpInds], is_empty)) # See if LP columns are empty (TRUE = EMPTY)"
"0","  mtm2m <- all(sapply(relSim[s, m2mInds], is_empty)) # See if M2M columns are empty (TRUE = EMPTY)"
"0","  mtcle <- all(sapply(relSim[s, cleInds], is_empty)) # See if CLE columns are empty (TRUE = EMPTY)"
"0","  "
"0","  # If any cells in these columns are NOT empty, mark these columns to be moved"
"0","  if (mtLs == FALSE) {"
"0","    # Extract the specified columns for the current row/subject"
"0","    ls <- relSim[s, lsInds]"
"0","    # Append/add the extracted columns to the new nomination stage data frame"
"0","    lsSubs <- rbind(lsSubs, ls)"
"0","    print(""Added to lsSubs"")"
"0","  }"
"0","  "
"0","  # If any cells in these columns are NOT empty, mark these columns to be moved"
"0","  if (mtLp == FALSE) {"
"0","    # Extract the specified columns for the current row/subject"
"0","    lp <- relSim[s, lpInds]"
"0","    # Append/add the extracted columns to the new nomination stage data frame"
"0","    lpSubs <- rbind(lpSubs, lp)"
"0","    print(""Added to lpSubs"")"
"0","  }"
"0","  "
"0","  # If any cells in these columns are NOT empty, mark these columns to be moved"
"0","  if (mtm2m == FALSE) {"
"0","    # Extract the specified columns for the current row/subject"
"0","    m2m <- relSim[s, m2mInds]"
"0","    # Append/add the extracted columns to the new nomination stage data frame"
"0","    m2mSubs <- rbind(m2mSubs, m2m)"
"0","    print(""Added to m2mSubs"")"
"0","  }"
"0","  "
"0","  # If any cells in these columns are NOT empty, mark these columns to be moved"
"0","  if (mtcle == FALSE) {"
"0","    # Extract the specified columns for the current row/subject"
"0","    cle <- relSim[s, cleInds]"
"0","    # Append/add the extracted columns to the new nomination stage data frame"
"0","    cleSubs <- rbind(cleSubs, cle)"
"0","    print(""Added to cleSubs"")"
"0","    "
"0","  } # Here, it continues on to the next element/number in our row/subject index"
"0","}"
"1","[1]"
"1"," ""Added to m2mSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lpSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lpSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lpSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lpSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lpSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"1","[1]"
"1"," ""Added to lsSubs"""
"1","
"
"0","# Take a look at each of your nomination stage data frames. You should see"
"0","# data populating only for subjects who passed that nomination stage. The first "
"0","# subject got to the M2M stage. Their data should be the only data in the m2mSubs data"
"0","# frame. Since most people stopped at the first, LS, stage, the lsSubs data frame"
"0","# should be the most populated. "
"0",""
"0","# Now that each of these stages are organized appropriately, "
"0","# we can combine the rows of each data frame into one data frame."
"0","relSim2 <- bind_rows(relSim2, lsSubs, lpSubs, m2mSubs, cleSubs)"
"0",""
"0","# We have our columns uniformly organized, but some empty cells remain. "
"0","# Now that we know our columns are correct, we can simply move the non-empty cells to the "
"0","# front of the data frame to standardize the formatting. "
"0",""
"0","# After using this function and data frame manipulation, all stages' data "
"0","# should be in the same 600 columns."
"0",""
"0","# Create a function to shift non-empty cells to the front of a data frame"
"0","shift_non_empty_to_front <- function(row) {"
"0","  non_empty <- row[!is.na(row)]"
"0","  empty <- rep(NA, length(row) - length(non_empty))"
"0","  return(c(non_empty, empty))"
"0","}"
"0",""
"0","# Apply the function to each row/subject of the relSim data frame"
"0","relSim2 <- as.data.frame(t(apply(relSim2, 1, shift_non_empty_to_front)))"
"0",""
"0","# Remove empty columns after col 600"
"0","relSim2 <- relSim2[, 1:600]"
"0",""
"0","# Add subject IDs to data frame"
"0","relSim2 <- relSim2 %>%"
"0","  mutate(loginID = relSim$loginID) %>%"
"0","  select(loginID, everything())"
"0",""
