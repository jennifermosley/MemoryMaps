# How many relation columns are there between each stage?
rel <- length(grep("Memory", relSim2)) # There are 24, 1 for each target memory (nodes), as expected
relInds <- grep("Memory", relSim2) # Here are the indices of cells that include
# "Memory", which would be relation data
# Let's rename the relation indices' columns to be Relations_1 - Relations_24
# relInds will be the indices we would like to rename in relSim2
# Generate new column names for the relation stages (Relations_1, Relations_2, etc.)
newRels <- paste0("Relations_", 1:24)
# Rename the specified columns (the Relations columns)
names(relSim2)[relInds] <- newRels
# Let's fix the sim columns. I think #_sim_# suffices for a new name.
# Using relInds as reference, let's rename the SUFFIXES in colNames of sets of of 24 columns between relInds
# These chunks of columns correspond to Simulation data for each Relation/reference memory.
# Function to rename columns in chunks of 24 (possible Simulation ratings)
rename_columns_in_chunks <- function(df, start_indices, chunk_size = 24) {
for (start in start_indices) {
new_col_names <- character()
# Calculate the end index for the current chunk
start <- start+1 # Whatever the relInd is plus 1 to start at the first sim cell
end <- (start + (chunk_size-1))
# Generate new column names for the current chunk
new_col_names <- paste0("_sim_", 1:24)
# Rename the columns in the current chunk
names(df)[start:end] <- new_col_names
}
return(df)
}
# Rename the columns in these chunks
relSim2 <- rename_columns_in_chunks(relSim2, relInds)
## Relational/Simulation Data Processing - PART 3 ##
# Let's add the same prefix from Relations columns to the SUFFIX of Simulation columns.
# Each prefix will need to correspond to the reference memory number. (1-24 changing for each nomination stage).
# We did this above.
# We also need the suffix to correspond to each possible target memory (1-24 changing for each memory).
# Define the indices whose colNames include "_sim_"
simInds <- grep("_sim_", names(relSim2)) # Here are the indices whose colNames include "_sim_"
# Similar to a function, let's create a sequence for every nth of an index (simInds).
# This will tell us the first element (1) of each chunk of 24 (by = 24)
firstSim <- seq(1, length(simInds), by = 24)
# Extract the elements using the generated sequence above. AKA, extract the first element.
first <- simInds[firstSim]
# For each chunk of 24 (in which 1:24 is a simulation rating for each possible connected memory),
for (chunk in 1:24) {
# Set the starting point as the chunk of simInds (corresponding to nomination stage)
start <- first[chunk]
# Set the end point as the chunk of simInds (corresponding to nomination stage)
end <- (start+23)
# Create new column names for the current chunk (1_sim_1, 1_sim_2, etc.)
new_names <- paste0(chunk,"_sim_",1:24)
# Assign the new names to the corresponding columns in relSim2
colnames(relSim2)[start:end] <- new_names
}
# With our relational-simulation data properly organized in relSim2,
# we can place relSim2 into our existing data frame, creating a new, clean
# main data frame.
# Define the original columns to replace in main data frame (df)
start_col <- 39 # Should correspond to the first relations_ls column
end_col <- 2438 # Should correspond to the laste sim_cle column
# Ensure that the range is within the bounds of the main data frame's columns
if (start_col < 1 || end_col > ncol(df) || start_col > end_col) {
stop("Invalid column range specified for df")
}
# Define columns to replace in the main data frame with those from relSim2
num_cols_to_replace <- end_col - start_col + 1
# If relSim2 has fewer columns than the range, only replace as many columns as relSim2 has
replace_cols <- min(num_cols_to_replace, ncol(relSim2))
# Replace the values in df with those from relSim2
df[, start_col:(start_col + replace_cols - 1)] <- relSim2[, 2:replace_cols]
# Replace the column names in the main data frame to match relSim2
colnames(df)[start_col:(start_col + replace_cols - 1)] <- colnames(relSim2)[2:replace_cols]
# Remove extant/unneeded/old stage-wise columns (640:2438) in the main dataframe
columns_to_remove <- 640:2438
df <- df[, -columns_to_remove]
# In this final dataframe, you should have 23 rows (subjects) with clean memory nomination columns (Memory #1, Memory #2, Memory #3, etc.) and clean relation/simulation columns (i.e., Relations_1, Relations_2, Relations_3, etc. and 1_sim_1, 1_sim_2, 1_sim_3, etc.). All other data (demographics at the front of the dataframe and self-report measures at the end of the dataframe) should be the same as the original.
# Congrats! You've complete the processing for creating memory networks!
# You can either save your work as an .RData file and send it to jmosl004@ucr.edu.
# Or, you can download your df as a csv file and send it to jmosl004@ucr.edu.
# Here is how to download as a csv file:
write.csv(df,"~/Downloads/df.csv", row.names = FALSE)
# This will show up in your Downloads folder.
# Here is how to download as a csv file:
write.csv(df,"~/Downloads/df.csv", row.names = FALSE)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
fullData <- read.csv("df.csv")
View(fullData)
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
View(fullLong)
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
cleanData <- read.csv("df.csv")
View(cleanData)
View(fullShort)
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# Join fullLong and fullShort
partialData <- fullLong %>% full_join(fullShort, by = c("subID"))
View(partialData)
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
cleanData <- read.csv("df.csv")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
View(fullData)
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(IM) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
engthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
m<-lmer( scale(importance) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
#library(groundhog)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
cleanData <- read.csv("df.csv")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
update(lmer)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
library(lmerTest)
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
#library(groundhog)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
cleanData <- read.csv("df.csv")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
library(lmerTest)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
library(dplyr)
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
#library(groundhog)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullData will all Qualtrics data processed (but not IDs re-coded)
cleanData <- read.csv("df.csv")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(easy) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(agency) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(agency) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(agency) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(transformativeness) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(transformativeness) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
m<-lmer( scale(change) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
# Download fullData file for separate analysis (onset file creation)
write.csv(fullData,"~/Downloads/fullData.csv")
# Import fullData dataset
data <- read.csv()
# Import fullData dataset
data <- read.csv("fullData.csv")
View(data)
remove(data)
# Import fullData dataset
data <- read.csv("fullData.csv")
View(data)
data <- data[ ,-1]
View(data)
source("~/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/UCRSNL/First-Year/EpNet/Functional Imaging/Processing and Analysis/subject-onsets_GLM.R")
install.packages("dplyr")
?scale
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv(fullData)
data <- read.csv("fullData.csv")
library(tidyverse)
library(dplyr)
library(dplyr)
data <- read.csv("fullData.csv")
setwd("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis")
?read.csv
data -> read.csv("fullData.csv")
data <- read.csv("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis/fullData.csv")
View(data)
data <- data[ ,-1]
data <- as.factor(data$subID)
data <- read.csv("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis/fullData.csv")
data <- data[ ,-1]
data$subID <- as.factor(data$subID)
View(data)
cent <- data[ , c(1,2,4:6)]
View(cent)
hist(cent$outdegree)
hist(cent$indegree)
hist(cent$indegree)
data$outdegree <- scale(data$outdegree
data$outdegree <- scale(data$outdegree)
cent$outdegree <- scale(cent$outdegree)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- read.csv("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis/fullData.csv")
data <- data[ ,-1]
data$subID <- as.factor(data$subID)
cent <- data[ , c(1,2,4:6)]
hist(cent$outdegree) # with n=23, most of outdegree values are below 5; heavily skewed
hist(cent$indegree) # with n=23, most of outdegree values are below 5; heavily skewed
cent$outdegree_scaled <- scale(cent$outdegree)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- read.csv("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis/fullData.csv")
data <- data[ ,-1]
data$subID <- as.factor(data$subID)
cent <- data[ , c(1,2,4:6)]
hist(cent$outdegree) # with n=23, most of outdegree values are below 5; heavily skewed
hist(cent$indegree) # with n=23, most of outdegree values are below 5; heavily skewed
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
hist(outdegree_scaled)
hist(cent$outdegree_scaled)
hist(cent$degree)
cent$outdegree_log <- log(cent$outdegree)
hist(cent$outdegree_log)
# Replace Infs to 0s (result of log transforming 0s)
cent$outdegree_log[is.infinite(cent$outdegree_log)] <- 0
hist(cent$outdegree_log)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree_log))
hist(cent$outdegree_scaled)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
hist(cent$outdegree_scaled)
hist(cent$outdegree_log)
install.packages("mclust")
library(mclust)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
hist(cent$outdegree_scaled)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
# Fit a Gaussian Mixture Model
gmm_model <- Mclust(cent$outdegree_scaled)
# Assign each observation to a bin based on the GMM classification
cent$A_bin <- as.factor(gmm_model$classification)
hist(cent$A_bin)
hist(as.numeric(cent$A_bin)
hist(as.numeric(cent$A_bin))
centList<-list(cent)
centList
centList[1]
print(centList[1])
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
data <- read.csv("/Users/jennifer/Library/CloudStorage/GoogleDrive-jmosl004@ucr.edu/My Drive/SYP/Analyses /Memory Maps Imaging Analysis/fullData.csv")
data <- data[ ,-1]
data$subID <- as.factor(data$subID)
cent <- data[ , c(1,2,4:6)]
hist(cent$outdegree) # with n=23, most of outdegree values are below 5; heavily skewed
hist(cent$indegree) # with n=23, most of outdegree values are below 5; heavily skewed
hist(cent$degree)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
hist(cent$outdegree_scaled)
cent$outdegree_scaled <- as.vector(scale(cent$outdegree))
cent$outdegree_log <- log(cent$outdegree)
# Replace Infs to 0s (result of log transforming 0s)
cent$outdegree_log[is.infinite(cent$outdegree_log)] <- 0
hist(cent$outdegree_log) # Our distribution is heavuly negatively skewed
# Log transformation work best when positively skewed?
reset
library(dplyr)
# Import fullData dataset and remove first column
data <- read.csv("fullData.csv")
data <- data[ ,-1]
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# Download fullData file for separate analysis (onset file creation)
write.csv(fullData,"fullData.csv")
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <- lmer(scale(positive) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(importance) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
m<-lmer( scale(importance) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
tbl_regression(m) %>% as_gt()
tbl_regression(m) %>% as_gt()
tbl_regression(m) %>% as_gt()
m<-lmer( scale(Easy) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(easy) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(agency) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(easy) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(transformativeness) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
#library(groundhog)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# Download fullData file for separate analysis (onset file creation)
write.csv(fullData,"fullData.csv")
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
# Personal importance of the memory is more equally associated with outdegree and indegree within the memory network
m<-lmer( scale(importance) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(Clear) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
#library(groundhog)
pkgs <-  c("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary")
pacman::p_load("tidyverse","here", "lmerTest", "sjPlot","broom.mixed", "kableExtra", "ggeffects", "gt", "brms", "bayestestR","ggdist", "pheatmap", "heatmaply","pheatmap","gplots","RColorBrewer", "tm", "wordcloud", "psych", "wesanderson","patchwork", "broom.mixed", "dplyr", "gtsummary","ordinal","r2glmm")
update.packages(pkgs)
library(lmerTest)
library(dplyr)
# Useful resources Jake imported from S2 analysis
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/corToOne.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/plotCommAxes.R")
devtools::source_url("https://raw.githubusercontent.com/JacobElder/MiscellaneousR/master/named.effects.ref.R")
# Import fullLong includes memories for each subject
fullLong <- read.csv("fullLong.csv")
fullLong <- fullLong[-1, ]
# Import fullShort - doesn't include memories for each subject
fullShort <- read.csv("fullShort.csv")
fullShort <- fullShort[-1, ]
# rankData <- arrow::read_parquet(here("RepData/rankings2.parquet"))
# Join fullLong and fullShort
fullData <- fullLong %>% full_join(fullShort, by = c("subID"))
fullData$subID <- as.factor(fullData$subID)
# Download fullData file for separate analysis (onset file creation)
write.csv(fullData,"fullData.csv")
# pal1 <-n colorRampPalette(brewer.pal(11,"BrBG"))(227)
pal <- colorRampPalette(wes_palette("Zissou1", 5))(length(unique(fullLong$subID)))
m <-lmer( scale(importance) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
# Personal importance of the memory is more equally associated with outdegree and indegree within the memory network
m<-lmer( scale(importance) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(Clear) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
m<-lmer( scale(clear) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
m<-lmer( scale(clear) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(agency) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(easy) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(transformativeness) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(strengthOut) + scale(strengthIn) + numID + ( scale(strengthOut) + scale(strengthIn) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
m<-lmer( scale(change) ~  scale(outdegree) + scale(indegree) + numID + ( scale(outdegree) + scale(indegree) | subID), data=fullData)
tbl_regression(m) %>% as_gt()
# Import fullData dataset and remove first column
data <- read.csv("fullData.csv")
data <- data[ ,-1]
# Load necessary library
install.packages("dplyr")
# Load necessary library
# install.packages("dplyr")
library(dplyr)
# Import fullData dataset and remove first column
data <- read.csv("fullData.csv")
data <- data[ ,-1]
